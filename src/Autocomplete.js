import React, { cloneElement, useEffect, useRef } from 'react';
import PropTypes from 'prop-types';
import cx from 'classnames';
import constants from './constants';
import idgen from './idgen';

const Autocomplete = ({
  id,
  className,
  title,
  icon,
  s,
  m,
  l,
  xl,
  offset,
  placeholder,
  // these are mentioned here only to prevent from getting into ...props
  value,
  onChange,
  options,
  ...props
}) => {
  const _autocomplete = useRef(null);
  const sizes = { s, m, l, xl };
  let classes = {
    col: true
  };
  constants.SIZES.forEach(size => {
    classes[size + sizes[size]] = sizes[size];
  });

  const renderIcon = icon => {
    return cloneElement(icon, { className: 'prefix' });
  };

  useEffect(() => {
    const instance = M.Autocomplete.init(_autocomplete.current, options);

    return () => {
      instance && instance.destroy();
    };
  }, [options]);

  return (
    <div
      offset={offset}
      className={cx('input-field', className, classes)}
      {...props}
    >
      {icon && renderIcon(icon)}
      <input
        placeholder={placeholder}
        className="autocomplete"
        id={id}
        onChange={onChange}
        type="text"
        ref={_autocomplete}
      />
      <label htmlFor={id}>{title}</label>
    </div>
  );
};

Autocomplete.propTypes = {
  /**
   * Uniquely identifies <input> generated by this component
   * Used by corresponding <label> for attribute
   */
  id: PropTypes.string,
  className: PropTypes.string,
  /*
   * The title of the autocomplete component.
   */
  title: PropTypes.string,
  /*
   * Optional materialize icon to add to the autocomplete bar
   */
  icon: PropTypes.node,
  s: PropTypes.number,
  m: PropTypes.number,
  l: PropTypes.number,
  xl: PropTypes.number,
  offset: PropTypes.string,
  /**
   * Placeholder for input element
   * */
  placeholder: PropTypes.string,
  /**
   * Called when the value of the input gets changed - by user typing or clicking on an auto-complete item.
   * Function signature: (event, value) => ()
   */
  onChange: PropTypes.func,
  /**
   * The value of the input
   */
  value: PropTypes.string,
  /**
   * Options for the autocomplete
   * <a target="_blank" rel="external" href="https://materializecss.com/autocomplete.html#options</a>
   */
  options: PropTypes.shape({
    /**
     * Data object defining autocomplete options with optional icon strings.
     */
    data: PropTypes.object.isRequired,
    /**
     * Limit of results the autocomplete shows.
     */
    limit: PropTypes.number,
    /**
     * Callback for when autocompleted.
     */
    onAutocomplete: PropTypes.func,
    /**
     * 	Minimum number of characters before autocomplete starts.
     */
    minLength: PropTypes.number,
    /**
     * Sort function that defines the order of the list of autocomplete options.
     */
    sortFunction: PropTypes.func
  })
};

Autocomplete.defaultProps = {
  id: `autocomplete_${idgen()}`,
  options: {
    data: {},
    limit: Infinity,
    onAutocomplete: null,
    minLength: 1,
    sortFunction: null
  }
};

export default Autocomplete;
